# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eezonijs5PdWC26RkqVRC6bgfQFBpxsQ
"""

import sys
import random
import numpy as np
import heapq 
SIZE = (9,9 )
import heapq as hq
import time
# size of the labyrinth (x, y)


if sys.getrecursionlimit() < SIZE[0] * SIZE[1]:
    sys.setrecursionlimit(SIZE[0] * SIZE[1])
# if max recursion limit is lower than needed, adjust it

N, S, E, W = 1, 2, 4, 8
# directions translated into bitnums to store information on all cleared walls in one variable per cell

GO_DIR = {N: (0, -1), S: (0, 1), E: (1, 0), W: (-1, 0)}
# dictionary with directions translated to digging moves

REVERSE = {E: W, W: E, N: S, S: N}
# when a passage is dug from a cell, the other cell obtains the reverse passage, too

lab = list(list(0 for i in range(SIZE[0])) for j in range(SIZE[1]))

def dig(x, y):
    # digs passage from a cell (x, y) in an unvisited cell
    dirs = [N, E, W, S]
    random.shuffle(dirs)
    # shuffles directions each time for more randomness
    for dir in dirs:
        new_x = x + GO_DIR[dir][0]
        new_y = y + GO_DIR[dir][1]
        if (new_y in range(SIZE[1])) and\
        (new_x in range(SIZE[0])) and\
        (lab[new_y][new_x] == 0):
            # checks if the new cell is not visited
            lab[y][x] |= dir
            lab[new_y][new_x] |= REVERSE[dir]
            # if so, apply info on passages to both cells
            dig(new_x, new_y)
            # repeat recursively
    
def check():
    # displays the cells' values for check-up
    for i in range(SIZE[1]):
        for j in range(SIZE[0]):
            print(" "*(1-(lab[i][j]//10))+\
            str(lab[i][j]), end='|')
        print ('')


def create():
    # displays the labyrinth
    # prints the seed (for reference) and the lab sizeâ€š
    for k in range(SIZE[0]):
        print(" ", end='')
        print(k, end='')
    myArray =[]
    line = []
    #print()
    #print("_" * (SIZE[0] * 2))
    
    
    for i in range (0,SIZE[0] * 2+1):
        line.append("_")
        
    myArray.append(line)
    for j in range(SIZE[1]):
        line =[]
        if j!=0:
            #print("|", end='')
            line.append("|")
        else:
            #print ("|", end='')
            line.append("|")
        for i in range(SIZE[0]):
            if (lab[j][i] & S != 0):
                #print(" ", end='')
                line.append(" ")
            else:
                #print("_", end='')
                line.append("_")
            if (lab[j][i] & E != 0):
                if ((lab[j][i] | lab[j][i+1]) & S != 0):
                    #print(" ", end='')
                    line.append(" ")
                else:
                    #print("_", end='')
                    line.append("_")
            elif (j==SIZE[1]-1) & (i==SIZE[0]-1):
                #print("|", end='')
                line.append("|")
            else:
                #print("|", end='')
                line.append("|")
        #print(j)
        myArray.append(line)
        
    return myArray
    
#myArray=np.chararray((SIZE[0],SIZE[1]))

def printArray(myArray):
    #for k in range(SIZE[0]):
        #print("_"+str(k)+"_", end='')
    for i in range(1, 24):
        print(str(i)+" ", end='')
        
        
    print()
    print()    
    
        
    for j in range (0,len(myArray)):
        for i in range (0, len(myArray[1])):
            print(myArray[j][i], end='')
        #print(j)
        print(" "+ str(j))



def Heuristic(DesiredPoint, CurrentLocation):
    return np.linalg.norm(DesiredPoint-CurrentLocation)


def newMatrix(myArray):
    line = []
    myArray1 = []
    for j in range (0,len(myArray)*3):
        line = []
        for i in range (0, len(myArray[0])*3):
            line.append(" ")
        myArray1.append(line)
        
    for j in range (1,len(myArray)+1):
        for i in range (1, len(myArray[1])+1):
            #print(i)
           # print(j)
            if (myArray[j-1][i-1] == "_"):
                myArray1[j*3-3][i*3-1] ="_"
                myArray1[j*3-3][i*3-2] ="_"
                myArray1[j*3-3][i*3-3] ="_"
                for c in range (j*3-2,j*3):
                    for b in range(i*3-3,i*3):
                        myArray1[c][b] = " "
            else :
                for c in range(j*3-3,j*3):
                    for b in range(i*3-3,i*3):
                        myArray1[c][b] = " "
                        
                        
    for j in range (1,len(myArray)+1):
        for i in range (1, len(myArray[1])+1):
            #print(i)
            #print(j)
            if (myArray[j-1][i-1] == "|"):
                myArray1[j*3-3][i*3-3] ="|"
                myArray1[j*3-4][i*3-3] ="|"
                myArray1[j*3-5][i*3-3] ="|"
                for c in range (j*3-3,j*3):
                    for b in range(i*3-2,i*3):
                        myArray1[c][b] = " "
            else :
                for c in range(j*3-3,j*3):
                    for b in range(i*3-3,i*3):
                        if (myArray1[c][b]== " "):
                            myArray1[c][b] = " "
                
                
    return myArray1
                
        
    
            
    
    #newmatrix =np.zeros((len(myArray[0])*2,len(myArray[1])*2))
    


        
seed = random.randint(0, 1000)
random.seed(seed)
dig(SIZE[0]//2, SIZE[1]//2)
# create matrix
myArray = create()
# change size
myArray = newMatrix(myArray)
printArray(myArray)
print("Please enter your starting x1 y1")
x1 = int(input())
y1 = int(input())
print("Please enter your desired location")
x2 = int(input())
y2 = int(input())

myArray[x1][y1] = "X"
myArray[x2][y2] = "Y"
printArray(myArray)

# Route
CurrentLocation = np.array([x1, y1])
DesiredPoint =  np.array([x2,y2])
Move = np.array([[-1,0],  #go up 
        [0,-1], #go left  
        [1,0],  #go down
        [0, 1]]) #go right

G = 0
Astart = G

heap = []
while not((DesiredPoint ==CurrentLocation)[0] and (DesiredPoint ==CurrentLocation)[1]):
    G = G+0.01
    #Heaparray = []
    Position0 = CurrentLocation + Move[0]
    Position1 = CurrentLocation + Move[1]
    Position2 = CurrentLocation + Move[2]
    Position3 = CurrentLocation + Move[3]
    if  Position0[0] != 0  and Position0[1] != 0 and Position0[0] != len(myArray) and Position0[0] != len(myArray[1]) and myArray[Position0[0]][Position0[1]] != "|"  and myArray[Position0[0]][Position0[1]] != "_":
        heuristic0 = Heuristic(DesiredPoint, Position0)
        Astar0 = G + heuristic0
        hq.heappush(heap, (Astar0,(str(Position0[0])+"-"+str(Position0[1]))))
    if  Position1[0] != 0  and Position1[1] != 0 and Position1[0] != len(myArray) and Position1[0] != len(myArray[1])  and myArray[Position1[0]][Position1[1]]  != "_" and myArray[Position1[0]][Position1[1]]  != "|":
        heuristic1 = Heuristic(DesiredPoint, Position1)
        Astar1 = G + heuristic1
        hq.heappush(heap, (Astar1,(str(Position1[0])+"-"+str(Position1[1]))))
        
    if  Position2[0] != 0  and Position2[1] != 0 and Position2[0] != len(myArray) and Position2[0] != len(myArray[1]) and myArray[Position2[0]][Position2[1]] != "|" and   myArray[Position2[0]][Position2[1]] != "_" :
        heuristic2 = Heuristic(DesiredPoint, Position2)
        Astar2 = G + heuristic2
        hq.heappush(heap, (Astar2,(str(Position2[0])+"-"+str(Position2[1]))))
   
    
    Position3 = CurrentLocation + Move[3]
    if  Position3[0] != 0  and Position3[1] != 0 and Position3[0] != len(myArray) and Position3[0] != len(myArray[1])  and myArray[Position3[0]][Position3[1]]  != "_" and myArray[Position3[0]][Position3[1]]  != "|" :
        heuristic3 = Heuristic(DesiredPoint, Position2)
        Astar3 = G + heuristic3
        hq.heappush(heap, (Astar3,(str(Position3[0])+"-"+str(Position3[1]))))
        
    #print(G)  
    smallest = heapq.heappop(heap)
    #heapq.heapify(heap)
    xy = smallest[1]
    Location = xy.index("-")
    x = int(xy[0:Location])
    y = int(xy[Location+1:])
    CurrentLocation = np.array([x ,y])
    myArray[x][y] = "X"
    #printArray(myArray)
    #time.sleep(0.3)
    # add them on the stack or que 
    # take the lowest cost from que and expolore this point
    if (len(heap)>5000):
        cheap = []
        for i in range(0,1000):
            hq.heappush(cheap,heapq.heappop(heap))
        heap = cheap
    
print(G)
printArray(myArray)
print("please select your starting point and the point you want to reach")